/** Declaration file generated by dts-gen */

export class System {
    constructor();

    createRuntime(auth: any): any;

    createUser(id: string | number): any;

    getGenerators(): any[];

    getUser(id: string | number): any;

    hasUser(id: string | number): boolean;

    inject(platform: any): void;

    registerCanonicalGenerator(o: any): void;

    registerGenerator(generator: any): void;

    registerNOSProgram(name: string, programs: (e: any) => any): void;

    removeUser(user: any): void;

}

export class UserSystem {
    constructor(...args: any[]);

    UIHandler(...args: any[]): any;

    addBlockType(...args: any[]): any;

    addDirection(...args: any[]): any;

    addPosition(...args: any[]): any;

    execl(...args: any[]): any;

    execv(...args: any[]): any;

    exit(...args: any[]): any;

    generate(...args: any[]): any;

    getCurrentGeneratorName(...args: any[]): any;

    getCurrentState(...args: any[]): any;

    getCurrentUI(...args: any[]): any;

    init(...args: any[]): any;

    isValidParameter(...args: any[]): any;

    nextGenerator(...args: any[]): any;

    perviousGenerator(...args: any[]): any;

    removeBlockType(...args: any[]): any;

    removeDirection(...args: any[]): any;

    removePosition(...args: any[]): any;

    runNOS(...args: any[]): any;

    useItem(...args: any[]): any;

}

export const systemInstance: System

export class Block {
    constructor(position: Position, blockType: BlockType)
    position: Position; blockType: BlockType;
};

export class BlockType {
    constructor(blockIdentifier: string, blockState: any)
    blockIdentifier: string; blockState: any;
};

export class BuildInstruction {
    constructor(type: string, data: any)
    type: string; data: any
};

export class Coordinate {
    constructor(x: number, y: number, z: number)
    x: number; y: number; z: number;
};

export class Description {
    constructor(name: string, usage: Usage)
    name: string; usage: Usage
};

export class Direction {
    constructor(x: number, y: number)
    x: number; y: number;
};

export class Generator {
    constructor(description: Description,
        positionArray, blockTypeArray, directionArray, option,
        addPosition, addBlockType, addDirection,
        removePosition, removeBlockType, removeDirection,
        validateParameter, generate, postGenerate, UIHandler)
};

export class Position {
    constructor(coordinate: Coordinate, tickingArea: any)
    coordinate: Coordinate; tickingArea: any;
};

export class Usage {
    constructor(positionUsage: any[], blockTypeUsage: any[], directionUsage: any[], optionUsage: any[])
    positionUsage: any[]; blockTypeUsage: any[]; directionUsage: any[]; optionUsage: any[];
};

export function canonicalGeneratorFactory({
    description: Description,

    criteria: {
        positionArrayLength: number,

        blockTypeArrayLength: number,

        directionArrayLength: number
    },
    option: any,

    method: {
        generate: Function, UIHandler: Function
    }
}): any;

export namespace emptyPlatform {
    function use(...args: any[]): any;

}

